{"version":3,"file":"static/webpack/static/development/pages/projects/[id].js.aea8201dc6c9a96eda12.hot-update.js","sources":["webpack:///./components/SliderImagesPopup/index.tsx","webpack:///./pages/projects/.tsx"],"sourcesContent":["import { FC, useState } from 'react'\nimport Lightbox, { ILightBoxProps } from 'react-image-lightbox'\n\ninterface SliderImagesPopupProps {\n  images: string[]\n  photoIndex: number\n  onMovePrevRequest: () => any\n  onMoveNextRequest: () => any\n  isOpen: boolean\n  onCloseRequest: () => any\n}\n\nexport const SliderImagesPopup: FC<\n  SliderImagesPopupProps & Partial<ILightBoxProps>\n> = (props) => {\n  const {\n    images,\n    photoIndex,\n    onMovePrevRequest,\n    onMoveNextRequest,\n    onCloseRequest,\n    isOpen,\n    ...rest\n  } = props\n\n  return isOpen ? (\n    <Lightbox\n      {...rest}\n      mainSrc={images[photoIndex]}\n      nextSrc={images[(photoIndex + 1) % images.length]}\n      prevSrc={images[(photoIndex + images.length - 1) % images.length]}\n      onCloseRequest={onCloseRequest}\n      onMovePrevRequest={onMovePrevRequest}\n      onMoveNextRequest={onMoveNextRequest}\n    />\n  ) : null\n}\n","import Kico from 'assets/images/Kico.jpg'\nimport { Image } from 'components/Image'\nimport { ProjectModel } from 'models/dto/project'\nimport { NextPage } from 'next'\nimport { Rest } from 'utils/api'\nimport ReactMarkdown from 'react-markdown'\nimport { useState } from 'react'\nimport { SliderImagesPopup } from 'components/SliderImagesPopup'\n\ntype ProjectViewProps = ProjectModel\n\nconst ProjectView: NextPage<ProjectViewProps> = (props) => {\n  const { name, avatar, images } = props\n  const [photoIndex, setIndex] = useState(0)\n  const [isOpen, setOpen] = useState(false)\n  return (\n    <main>\n      <section className=\"project-head\">\n        <Image defaultImage={Kico} alt={name} src={avatar as string} />\n        <h1>{name}</h1>\n        <p>{props.description}</p>\n        <p>\n          {props.previewUrl && (\n            <a href={props.previewUrl} className=\"btn blue\" target=\"_blank\">\n              预览站点\n            </a>\n          )}\n          {props.projectUrl && (\n            <a\n              href={props.projectUrl}\n              className=\"btn transparent\"\n              target=\"_blank\"\n            >\n              获取项目\n            </a>\n          )}\n          {props.docUrl && (\n            <a href={props.docUrl} className=\"btn transparent\" target=\"_blank\">\n              项目文档\n            </a>\n          )}\n        </p>\n      </section>\n      {images?.length && (\n        <>\n          <section className=\"project-screenshot\">\n            {images.map((image, i) => {\n              return (\n                <img\n                  src={image}\n                  key={i}\n                  onClick={() => {\n                    setIndex(i)\n                    setOpen(true)\n                  }}\n                  style={{ cursor: 'pointer' }}\n                />\n              )\n            })}\n          </section>\n          <SliderImagesPopup\n            images={images}\n            onCloseRequest={() => setOpen(false)}\n            isOpen={isOpen}\n            photoIndex={photoIndex}\n            onMovePrevRequest={() =>\n              setIndex((photoIndex + images.length - 1) % images.length)\n            }\n            onMoveNextRequest={() => setIndex((photoIndex + 1) % images.length)}\n          />\n        </>\n      )}\n\n      <article>\n        <ReactMarkdown source={props.text} />\n      </article>\n    </main>\n  )\n}\n\nProjectView.getInitialProps = async (ctx) => {\n  const { query } = ctx\n  const id = query.id as string\n  const { data } = await Rest('Project').get(id)\n  return data\n}\n\nexport default ProjectView\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA;AAWA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AAGA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpaA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAAA;AAGA;AAHA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAMA;;;;A","sourceRoot":""}